[org 0x100]
jmp start

seconds: dw 10
ticks: dw 0
key_flag: dw 0
oldkb: dw 0

clrscr1: 
push bp 
mov bp,sp
mov ax, 0xb800
mov es,ax
mov di,0
nextt: 
mov word [es:di],  0x0b20
add di,2
cmp di, 4000
jne nextt 
pop bp 
ret

change_color: 
push bp 
mov bp,sp
mov ax, 0xb800
mov es,ax
mov di,0
next: 
mov word [es:di], 0x0c20
add di,2
cmp di, 4000
jne next
pop bp 
ret

kbisr: 

push ax
in al, 0x60 ; read char from keyboard port
mov word [cs:key_flag], 1
exit: mov al, 0x20
out 0x20, al ; send EOI to PIC
pop ax
iret ; return from interrupt



timer: 
push ax
inc     word [cs: ticks]
cmp     word [cs: ticks], 18        ; 18.2 ticks per second
jne     move_on

 dec    word [cs: seconds]          ; decrease total seconds by 1
 cmp    word[cs:seconds], 0
 je exit
 mov    word [cs: ticks], 0
 ;call  check

move_on:
cmp word [cs:key_flag], 1 ; is the printing flag set
jne exitt

call change_color ;print tick count

exitt:
mov al, 0x20
out 0x20, al ; send EOI to PIC
pop ax
iret ; return from interrupt




start: 
call clrscr1
xor ax, ax
mov es, ax ; point es to IVT base

mov ax, [es:9*4]
mov [oldkb], ax ; save offset of old routine
mov ax, [es:9*4+2]
mov [oldkb+2], ax ; save segment of old routine

cli ; disable interrupts
mov word [es:9*4], kbisr ; store offset at n*4
mov [es:9*4+2], cs ; store segment at n*4+2
mov word [es:8*4], timer ; store offset at n*4
mov [es:8*4+2], cs ; store segment at n*4+2
sti ; enable interrupts

mov dx, start ; end of resident portion
add dx, 15 ; round up to next para
mov cl, 4
shr dx, cl ; number of paras
mov ax, 0x3100 ; terminate and stay resident
int 0x21
