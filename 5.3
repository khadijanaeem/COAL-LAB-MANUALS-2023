[org 0x0100]
jmp start
arr: dw 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64
start: mov ax, 13

sub sp,2
push ax
call myalloc
pop ax
end: mov ax, 0x4c00
int 21h
myalloc: push bp
mov bp,sp
sub sp,4 ;creating space for two local variables
pusha
mov ax, 0
mov bx, 0
mov cx, 0
mov word [bp - 2], -1 
mov si, [bp + 4] 
cmp si, 0 
jz dreturn
mov dx, 1000000000000000b ;mask 
mov word [bp - 4], 0 
loop1: test byte [arr + bx] , dh
jnz reset
cmp word [bp - 4],1 
jz loop2
zeroFound: mov word [bp - 2], cx 
mov word [bp - 4], 1 
loop2: inc ax 
cmp ax,si
jz changeto1
l1: inc cx
cmp cx, 0x400 ;0x400bits = 1024 bits
jz return 
shr dh,1
cmp dh,0
jz update
jmp loop1
update: mov dx, 1000000000000000b
add bx, 1
jmp loop1
reset: mov ax, 0
mov word [bp - 2], -1
mov word [bp - 4], 0
jmp l1
dreturn: 
jmp return 
changeto1: mov ax,0
mov bx,0
mov cx,0
mov dx,8
mov ax, [bp - 2] ;starting bit (index)
mov bl, al 
shr bl, 3 
mov bh, 0 
mov al, 1
shl al, cl 
or byte [arr + bx], al 
return: mov ax, [bp - 2]
mov word [bp + 6], ax
popa
add sp, 4
pop bp
ret 2
