[org 0x0100]
jmp start
message: db 'C' ; 
length: dw 1 
m1: db 'Left'
m2: db 'Right'
l1: dw 4
l2: dw 5
clrscr: push es
push ax
push di
mov ax, 0xb800
mov es, ax 
mov di, 0 
nextloc:
 mov word [es:di], 0x0720 
add di, 2 
cmp di, 4000 
jne nextloc 
pop di
pop ax
pop es
ret

printstr: 
push bp
mov bp, sp
push es
push ax
push cx
push si
push di
mov ax, 0xb800
mov es, ax ; point es to video base
mov al, 80 ; load al with columns per row
mul byte [bp+10] ; multiply with y position
add ax, [bp+12] ; add x position
shl ax, 1 ; turn into byte offset
mov di, ax ; point di to required location
mov si, [bp+6] ; point si to string
mov cx, [bp+4] ; load length of string in cx
mov ah, [bp+8] ; load attribute in ah
nextchar: mov al, [si] ; load next char of string
mov [es:di], ax 
add di, 2
add si, 1 
loop nextchar 

pop di
pop si
pop cx
pop ax
pop es
pop bp
ret 10

start: 

call clrscr 
mov ax, 40
push ax 
mov ax, 12
push ax 
mov ax, 1 
push ax 
mov ax, message
push ax 
push word [length] 
call printstr 

mov ah, 0
int 16h
cmp al, 'l'
jne nextcheck
mov ax, 40
mov bx,[l1]
shl bx,1
sub ax,bx
push ax 
mov ax, 12
push ax 
mov ax, 1 
push ax 
mov ax, m1
push ax 
push word [l1] 
call printstr

nextcheck:
cmp al,'r'
jne end
mov ax, 40
mov bx,[l1]
shl bx,1
add ax,bx
push ax 
mov ax, 12
push ax 

mov ax, 1 
push ax
mov ax, m2
push ax 
push word [l2] 
call printstr

end:
mov ax, 0x4c00 ; terminate program
int 0x21
